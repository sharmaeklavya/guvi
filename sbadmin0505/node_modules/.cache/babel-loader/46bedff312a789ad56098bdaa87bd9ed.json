{"ast":null,"code":"var _jsxFileName = \"/Users/eklavyasharma/Documents/GitHub/guvi/sbadmin0505/react-app/src/users/CreateUser.js\",\n    _s = $RefreshSig$();\n\nimport TextField from \"./TextField\";\nimport UserContext from \"../usercontext\";\nimport { useContext, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Formik, Form } from \"formik\";\nimport * as Yup from \"yup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function CreateUser() {\n  _s();\n\n  const userData = useContext(UserContext);\n  const history = useHistory();\n  const [id, setId] = useState(1);\n  const [name, setName] = useState(\"\");\n  const [position, setPosition] = useState(\"\");\n  const [location, setLocation] = useState(\"\");\n  const [age, setAge] = useState(0);\n  const [startDate, setStartDate] = useState(\"\");\n  const [salary, setSalary] = useState(0);\n  const [submit, setSubmit] = useState(\"\");\n\n  let userSubmit = async () => {\n    userData.setUserList([...userData.userList, {\n      id: id,\n      name,\n      position,\n      location,\n      age,\n      startDate,\n      salary\n    }]);\n    await fetch(\"https://6093bd12a7e53a0017951767.mockapi.io/users\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        id: id,\n        name,\n        position,\n        location,\n        age,\n        startDate,\n        salary\n      }),\n      headers: {\n        \"content-type\": \"application/json\"\n      }\n    });\n    setSubmit(\"1 User Created\");\n    setId(id => id + 1);\n    history.push(\"/users\");\n  }; // Yup validation for Formik\n\n\n  const validate = Yup.object({\n    fullName: Yup.string().max(15, \"Must be 15 characters or less\").required(\"Required\"),\n    employeePosition: Yup.string().max(20, \"Must be 20 characters or less\").required(\"Required\"),\n    officeLocation: Yup.string().max(55, \"Must be 55 characters or less\").required(\"Required\"),\n    employeeAge: Yup.number().min(18, \"Must be older than 18\").max(65, \"Must be younger than 65\").required(\"Required\"),\n    officeStartDate: Yup.date().max(new Date(), \"Must be earlier than today\").required(\"required\").nullable(),\n    employeeSalary: Yup.number().min(3000, \"Must be USD 3000 or more\").required(\"Required\")\n  });\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: {\n      fullName: \"\",\n      employeePosition: \"\",\n      officeLocation: \"\",\n      employeeAge: \"\",\n      officeStartDate: null,\n      employeeSalary: \"\"\n    },\n    validationSchema: validate,\n    onSubmit: userSubmit,\n    children: formik => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"h3 my-3\",\n        children: \"Create User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"h5 my-3 text-center text-primary\",\n        children: submit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-12\",\n            children: /*#__PURE__*/_jsxDEV(Form, {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-row\",\n                children: [/*#__PURE__*/_jsxDEV(TextField, {\n                  label: \"Full Name\",\n                  name: \"fullName\",\n                  type: \"text\",\n                  value: name,\n                  onInput: e => setName(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 99,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                  label: \"Position / Designation\",\n                  name: \"employeePosition\",\n                  type: \"text\",\n                  value: position,\n                  onInput: e => setPosition(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 106,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                  label: \"Office Location\",\n                  name: \"officeLocation\",\n                  type: \"text\",\n                  value: location,\n                  onInput: e => setLocation(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 113,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 98,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-row\",\n                children: [/*#__PURE__*/_jsxDEV(TextField, {\n                  label: \"Age\",\n                  name: \"employeeAge\",\n                  type: \"number\",\n                  value: age,\n                  onInput: e => setAge(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 122,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                  label: \"Employment Start Date\",\n                  name: \"officeStartDate\",\n                  value: startDate,\n                  type: \"date\",\n                  onInput: e => setStartDate(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 129,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                  label: \"Current Salary\",\n                  name: \"employeeSalary\",\n                  value: salary,\n                  type: \"number\",\n                  onInput: e => setSalary(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 136,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"submit\",\n                className: \"btn btn-primary\",\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CreateUser, \"3YLbfSk2A/KqDlE+6GSUjTLjurE=\", false, function () {\n  return [useHistory];\n});\n\n_c = CreateUser;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateUser\");","map":{"version":3,"sources":["/Users/eklavyasharma/Documents/GitHub/guvi/sbadmin0505/react-app/src/users/CreateUser.js"],"names":["TextField","UserContext","useContext","useState","useHistory","Formik","Form","Yup","CreateUser","userData","history","id","setId","name","setName","position","setPosition","location","setLocation","age","setAge","startDate","setStartDate","salary","setSalary","submit","setSubmit","userSubmit","setUserList","userList","fetch","method","body","JSON","stringify","headers","push","validate","object","fullName","string","max","required","employeePosition","officeLocation","employeeAge","number","min","officeStartDate","date","Date","nullable","employeeSalary","formik","e","target","value"],"mappings":"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","sourcesContent":["import TextField from \"./TextField\";\nimport UserContext from \"../usercontext\";\nimport { useContext, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Formik, Form } from \"formik\";\nimport * as Yup from \"yup\";\n\nexport default function CreateUser() {\n  const userData = useContext(UserContext);\n  const history = useHistory();\n\n  const [id, setId] = useState(1);\n  const [name, setName] = useState(\"\");\n  const [position, setPosition] = useState(\"\");\n  const [location, setLocation] = useState(\"\");\n  const [age, setAge] = useState(0);\n  const [startDate, setStartDate] = useState(\"\");\n  const [salary, setSalary] = useState(0);\n  const [submit, setSubmit] = useState(\"\");\n  let userSubmit = async () => {\n    userData.setUserList([\n      ...userData.userList,\n      {\n        id: id,\n        name,\n        position,\n        location,\n        age,\n        startDate,\n        salary,\n      },\n    ]);\n    await fetch(\"https://6093bd12a7e53a0017951767.mockapi.io/users\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        id: id,\n        name,\n        position,\n        location,\n        age,\n        startDate,\n        salary,\n      }),\n      headers: {\n        \"content-type\": \"application/json\",\n      },\n    });\n    setSubmit(\"1 User Created\");\n    setId((id) => id + 1);\n    history.push(\"/users\");\n  };\n\n  // Yup validation for Formik\n  const validate = Yup.object({\n    fullName: Yup.string()\n      .max(15, \"Must be 15 characters or less\")\n      .required(\"Required\"),\n    employeePosition: Yup.string()\n      .max(20, \"Must be 20 characters or less\")\n      .required(\"Required\"),\n    officeLocation: Yup.string()\n      .max(55, \"Must be 55 characters or less\")\n      .required(\"Required\"),\n    employeeAge: Yup.number()\n      .min(18, \"Must be older than 18\")\n      .max(65, \"Must be younger than 65\")\n      .required(\"Required\"),\n    officeStartDate: Yup.date()\n      .max(new Date(), \"Must be earlier than today\")\n      .required(\"required\")\n      .nullable(),\n    employeeSalary: Yup.number()\n      .min(3000, \"Must be USD 3000 or more\")\n      .required(\"Required\"),\n  });\n\n  return (\n    <Formik\n      initialValues={{\n        fullName: \"\",\n        employeePosition: \"\",\n        officeLocation: \"\",\n        employeeAge: \"\",\n        officeStartDate: null,\n        employeeSalary: \"\",\n      }}\n      validationSchema={validate}\n      onSubmit={userSubmit}\n    >\n      {(formik) => (\n        <>\n          <h1 className=\"h3 my-3\">Create User</h1>\n          <h5 className=\"h5 my-3 text-center text-primary\">{submit}</h5>\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-md-12\">\n                <Form>\n                  <div className=\"form-row\">\n                    <TextField\n                      label=\"Full Name\"\n                      name=\"fullName\"\n                      type=\"text\"\n                      value={name}\n                      onInput={(e) => setName(e.target.value)}\n                    />\n                    <TextField\n                      label=\"Position / Designation\"\n                      name=\"employeePosition\"\n                      type=\"text\"\n                      value={position}\n                      onInput={(e) => setPosition(e.target.value)}\n                    />\n                    <TextField\n                      label=\"Office Location\"\n                      name=\"officeLocation\"\n                      type=\"text\"\n                      value={location}\n                      onInput={(e) => setLocation(e.target.value)}\n                    />\n                  </div>\n                  <div className=\"form-row\">\n                    <TextField\n                      label=\"Age\"\n                      name=\"employeeAge\"\n                      type=\"number\"\n                      value={age}\n                      onInput={(e) => setAge(e.target.value)}\n                    />\n                    <TextField\n                      label=\"Employment Start Date\"\n                      name=\"officeStartDate\"\n                      value={startDate}\n                      type=\"date\"\n                      onInput={(e) => setStartDate(e.target.value)}\n                    />\n                    <TextField\n                      label=\"Current Salary\"\n                      name=\"employeeSalary\"\n                      value={salary}\n                      type=\"number\"\n                      onInput={(e) => setSalary(e.target.value)}\n                    />\n                  </div>\n                  <button type=\"submit\" className=\"btn btn-primary\">\n                    Submit\n                  </button>\n                </Form>\n              </div>\n            </div>\n          </div>\n        </>\n      )}\n    </Formik>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}